spring.application.name=demo
server.port=9099

my.id=mid
my.name=mname

# 使用druid数据源
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/ma?useSSL=false
spring.datasource.username=root
spring.datasource.password=123456

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle= 5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait= 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis= 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery= SELECT 1 FROM DUAL
spring.datasource.testWhileIdle= true  
spring.datasource.testOnBorrow=false  
spring.datasource.testOnReturn= false  
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements= true
spring.datasource.maxPoolPreparedStatementPerConnectionSize= 20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#spring.datasource.spring.datasource.filters= stat,wall,log4j
spring.datasource.filters= stat
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties= druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
# spring.datasource.useGlobalDataSourceStat=true

#spring.jpa.hibernate.ddl-auto=update # create  update
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.hibernate.show-sql=true

## REDIS (RedisProperties)
## Redis数据库索引（默认为0）
#spring.redis.database=0
## Redis服务器地址
#spring.redis.host=192.168.5.84
## Redis服务器连接端口
#spring.redis.port=6379
## Redis服务器连接密码（默认为空）
#spring.redis.password=redis123
## 连接池最大连接数（使用负值表示没有限制）
#spring.redis.pool.max-active=8
## 连接池最大阻塞等待时间（使用负值表示没有限制）
#spring.redis.pool.max-wait=-1
## 连接池中的最大空闲连接
#spring.redis.pool.max-idle=8
## 连接池中的最小空闲连接
#spring.redis.pool.min-idle=0
## 连接超时时间（毫秒）
#spring.redis.timeout=0